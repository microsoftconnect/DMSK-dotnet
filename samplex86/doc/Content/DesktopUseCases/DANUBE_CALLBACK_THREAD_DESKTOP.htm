<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Use Cases" data-mc-conditions="Danube.Desktop">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" /><title>Callback thread affinity</title>
        <link href="../Resources/Stylesheets/DocLoc.css" rel="stylesheet" type="text/css" />
        <script src="../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    </head>
    <body>
        <h1><a name="kanchor39"></a>Callback thread affinity</h1>
        <p>If your app is multithreaded, it must meet certain criteria to ensure correct operation.</p>
        <p><span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> is an active component in your app. To keep your app responsive, it executes its code on its own dedicated threads. Interaction with other components in your app is restricted to specific threads. For example, text controls can only be accessed from the thread which created them. Every method call originating from <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> towards your app is executed on a well-defined thread. This chapter explains the underlying model.</p>
        <h2>Integration guidelines</h2>
        <p>To ensure that your integration works properly, do the following:</p>
        <ul>
            <li>
                <p>Call the Session's <code>Open()</code> method from the app's main UI thread only. For more information, see: <a href="#ThreadAffinities">Thread affinities of callbacks and incoming calls</a>.</p>
            </li>
            <li>
                <p>Set focus to a VuiController from the app's main UI thread only. If the app has multiple UI threads, the main UI thread is the thread that owns the controls which are speech-enabled by that VuiController. For more information, see: <a href="#ThreadAffinities">Thread affinities of callbacks and incoming calls</a>.</p>
            </li>
            <li>
                <p>Terminate UI threads only after all VuiControllers and the session have been closed. For more information, see: <a href="#Lifetime">Lifetime of callback threads</a>.</p>
            </li>
            <li>
                <p>Make sure that your code is reentrant if you call <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> methods. For example, <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> should be able to manipulate the GUI before returning from a method call. For more information, see: <a href="#Deadlock_avoidance">Deadlock avoidance and reentrancy</a>.</p>
            </li>
            <li>
                <p>Don't invoke methods synchronously between threads from which you call <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> methods. For more information, see:&#160;<a href="#Deadlock">Deadlock</a>.</p>
            </li>
        </ul>
        <h2>Concepts</h2>
        <h3>Components</h3>
        <p>The objects in your app which are not part of <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> are referred to as <i>the integration</i>.</p>
        <h3>Method calls</h3>
        <p>The means of interaction between <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> and the integration is the invocation of a method, executed on a given thread. The set of possible method calls constitute the API of <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span>. In addition to defined methods, there are also implicit ones. For example, when <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> modifies the text in an edit control, it calls methods on the .NET framework object representing that text control. This threading model also applies to implicit method calls.</p>
        <p>A method call can be classified as either an <i>incoming call</i> or a <i>callback</i> (these also include events). The direction is defined from the point of view of <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span>. Both incoming calls and callbacks are relevant for the threading model.</p>
        <h3>Threads</h3>
        <p>The threads involved in the model are .NET threads in the Windows process executing your app, created and owned either by <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> or the integration.</p>
        <p>Threads owned by <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> are completely encapsulated; usually, the integration will neither receive callbacks on these threads, nor can it invoke incoming calls on them.</p>
        <p>Threads owned by the integration are classified as <i>UI threads</i> and <i>worker threads</i>. A UI thread has a message queue associated with it, which enables the usage of operating system or .NET framework services to synchronously or asynchronously invoke methods on this thread. All other threads are worker threads.</p>
        <h3>Invocation</h3>
        <p>Code executing on a thread might need to invoke a method on a different thread. For example, invoking a method on an object which represents a UI element is only allowed on the thread which has created the object. The invocation can happen by any means: it's not necessarily carried out by the operating system, via its message queue mechanism. The invocation can be <i>synchronous</i> or <i>asynchronous</i>, depending on whether the initiating code waits for its completion or not. Synchronous invocations are referred to as <i>sending</i> a method (or method call, method invocation) to a thread, asynchronous invocations as <i>posting</i>.</p>
        <p>Only the invocation on UI threads is relevant for <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span>.</p>
        <h3><a name="Deadlock"></a>Deadlock</h3>
        <p>If code on a source thread synchronously invokes a method on a target thread, the source thread will be blocked until that method is executed on the target thread. If the invoked method directly or indirectly tries to invoke a method on the source thread, it can't be executed, as the source thread is blocked, waiting for the first method call to return. The target thread is therefore also blocked, waiting for the execution of the second method call. This circular waiting situation is a deadlock; code that should subsequently run on the threads involved won't be executed; the app will probably stop working (Figure 1/a).</p>
        <p>A deadlock can involve more than two threads (Figure 1/b). If thread 1 sends a method to thread 2, and thread 2 sends a method to thread 3, all three threads will deadlock, if thread 3 sends a method to either thread 2 or thread 1.</p>
        <p>
            <img src="../Resources/Desktop_Callback_Thread_Figure1.png" alt="" />
        </p>
        <p class="compact2">Figure 1: Deadlock situation involving two (a) and three (b) threads</p>
        <h3><a name="Deadlock_avoidance"></a>Deadlock avoidance and reentrancy</h3>
        <p>In the first case outlined above, if two threads are waiting on each other, the deadlock can be avoided if the source thread stops waiting for the completion of the first method, executes the second method and then resumes waiting. In this case, the target thread can continue processing and complete the execution of the first method, which wakes up the source thread (see Figure 2). This applies to all situations when a method call would close a circle on the wait graph of the threads involved, resulting in a circular waiting situation.</p>
        <p>
            <img src="../Resources/Desktop_Callback_Thread_Figure2.png" alt="" />
        </p>
        <p>Figure 2: Avoiding a deadlock by waking up a waiting thread</p>
        <p>However, this deadlock avoidance mechanism implies that a thread, while waiting for a method call, can execute a seemingly unrelated method. This method call (Method2 in Figure 2) might change the state of the program, and when Send(Method1) returns and the execution of the source thread resumes, it might find a different state than before invoking Method1. Assumptions based on the single-threaded fully sequential execution of the code are not valid anymore. Code executing on the source thread is <i>reentered</i>; code working correctly in this situation is called <i>reentrant</i>.</p>
        <p>In Figure 2 the Method2 call is a logical consequence of the execution of Method1; the author of the code executing on the source thread expects such a method being invoked while waiting for Method1. However, the deadlock avoidance mechanism can't differentiate based on causal relationships between method calls. A thread must be woken up every time a synchronous method invocation would close a circle on the wait graph, even if the last method call is not a consequence of the one the thread is waiting for. This means that the author of the code executing on the source thread can't assume anything about the methods possibly called back while waiting for an invocation (Figure 3).</p>
        <p>
            <img src="../Resources/Desktop_Callback_Thread_Figure3.png" alt="" />
        </p>
        <p class="compact2">Figure 3: Causally unrelated callback executed while waiting for a synchronous invocation</p>
        <h2><a name="ThreadAffinities"></a>Thread affinities of callbacks and incoming calls</h2>
        <p>This section defines the callback threads <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> operates on and the thread affinities of method callbacks. Some incoming calls from your integration are restricted in terms of which thread they can originate from; this is also defined here.</p>
        <h3>Callback threads</h3>
        <p>A UI thread must be associated with each VuiController. Such a thread is referred to as a <i>VuiController callback thread</i>. <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> uses this thread exclusively for operations and event notifications relevant for that VuiController. Session events are invoked on the VuiController callback thread of the most recently focused VuiController, unless your app has a designated session callback thread.</p>
        <h3>VuiController callback thread</h3>
        <p>The following callbacks are invoked on a VuiController's callback thread:</p>
        <ul>
            <li>The <a href="DANUBE_EVENTS_DESKTOP.htm">events</a> defined in the VuiController class.</li>
            <li>All text control manipulation carried out directly by <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> for the text controls associated with this VuiController instance.</li>
        </ul>
        <p>The VuiController's UI thread is its callback thread. Whenever a VuiController <a href="DANUBE_VUI_FORM_FOCUS_DESKTOP.htm">is focused</a>, the callback thread is set to the thread from which focus was set. Don't set focus to a VuiController from a thread other than its UI thread.</p>
        <p class="note"><b>Note:</b> The COM threading model for threads running Windows Forms components must be set to single-threaded apartment. Not doing so can result in a deadlock.</p>
        <h3>Session callback thread</h3>
        <p>Session level callbacks are the <a href="DANUBE_EVENTS_DESKTOP.htm">events</a> defined in the session class. These are always invoked on the session callback thread, which is by default the callback thread of the most recently focused VuiController. You can override this default behavior by calling the session's <code>SetCallbackThread()</code> method from a UI thread. Afterwards, this UI thread will be designated as the session callback thread. Each call of <code>SetCallbackThread()</code> overrides the previous setting.</p>
        <p>If no VuiController has been activated and you haven't called <code>SetCallbackThread()</code>, the session callback thread will default to the thread from which the session was opened most recently.</p>
        <h3><a name="Lifetime"></a>Lifetime of callback threads</h3>
        <p>VuiController callback threads must exist as long as the VuiController is still open. The session callback thread must exist as long as the session is open. If the session callback thread wasn't set explicitly and thus defaults to the callback thread of the most recently focused VuiController, the lifetime requirements of the session callback thread will apply to that VuiController callback thread (as long as it plays the role of the session callback thread).</p>
        <h3>Thread affinity of incoming calls</h3>
        <p>Generally, a method call on <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> can originate from any worker or UI thread. Calls which implicitly designate the UI thread from which they're invoked as a callback thread, are exceptions. These are:</p>
        <ul>
            <li>The method/property which effectively sets focus to a VuiController. For more information, see: <a href="DANUBE_VUI_FORM_FOCUS_DESKTOP.htm">Setting the VUI form focus</a>.</li>
            <li><code>SetCallbackThread()</code> on the shared session instance.</li>
        </ul>
    </body>
</html>